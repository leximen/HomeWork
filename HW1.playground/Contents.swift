import UIKit
                                    //ДОМАШНЕЕ ЗАДАНИЕ №3
/*1. Задание: Сортировка чисел
Описание: Разработайте функцию, которая сортирует массив чисел в порядке возрастания без использования стандартной функции sort().
Требования:
Функция сортировки: Создайте функцию, которая принимает массив чисел.
Функция должна возвращать массив, отсортированный в порядке возрастания.
Ожидаемый результат: При передаче массива чисел в функцию, она вернет отсортированный массив.*/

func sortArray(_ array: [Int]) -> [Int] {
    var sortedArray = array
    let n = sortedArray.count
    
    for i in 0..<n {
        for j in 0..<(n - i - 1) {
            if sortedArray[j] > sortedArray[j + 1] {
                let temp = sortedArray[j]
                sortedArray[j] = sortedArray[j + 1]
                sortedArray[j + 1] = temp
            }
        }
    }
    
    return sortedArray
}

let array = [5, 2, 9, 1, 7]
let sortedArray = sortArray(array)
print(sortedArray)

/*2. Задание: Проверка палиндрома
Описание: Разработайте функцию, которая проверяет, является ли предоставленная строка палиндромом.
Требования:
Функция проверки: Создайте функцию, принимающую строку в качестве параметра.
Функция должна возвращать true, если строка является палиндромом, и false в противном случае.
Ожидаемый результат: При передаче строки в функцию, она вернет true для палиндромов и false в остальных случаях.*/
func palindrom(str: String) -> Bool {
    return str == String(str.reversed())
}
palindrom(str: "кабак")


/*3. Задание: Сумма элементов массива
Описание: Разработайте функцию, которая возвращает сумму всех элементов массива целых чисел.
Требования:
Функция суммирования: Создайте функцию, принимающую массив целых чисел.
Функция должна возвращать сумму всех элементов массива.
Ожидаемый результат: При передаче массива чисел в функцию, она вернет их сумму.*/
let arrayItems = [1, 2, 3, 4]

func samArray(a: [Int]) -> Int {
    var sum = 0

    for i in a {
        sum += i
    }
    return sum
}

let resultTask3 = samArray(a: arrayItems)
print(resultTask3)


/*4. Задание: Конвертация температуры
Описание: Разработайте функцию для конвертации температуры из градусов Цельсия в градусы Фаренгейта.
Формула: fahrenheit = (celsius * 9.0/5.0) + 32.0
Требования:
Функция конвертации: Создайте функцию, принимающую температуру в градусах Цельсия.
Функция должна возвращать эквивалент температуры в градусах Фаренгейта.
Ожидаемый результат: При передаче температуры в градусах Цельсия в функцию, она вернет ее эквивалент в градусах Фаренгейта.*/
func tempepature(celsius: Float) -> Float {
   (celsius * 9.0/5.0) + 32.0
}
let result = tempepature(celsius: 2.5)

/*5. Задание: Записная книжка
Описание: Создайте программу для управления записной книжкой, содержащей имя, телефон и электронную почту.
Требования:
Создайте массив для хранения записей.
Функция поиска: Напишите функцию для поиска записи по имени.
Ожидаемый результат: При поиске по имени функция вернет соответствующую запись.*/
let notebook = [
    "Alex, 79089519039, alex@yahoo.com",
    "Bob, 79645342323, bob@gmail.com",
    "Kristina, 79119410991, kris@outlook.com",
    "Kate, 79909225050, kate@mail.com"
]

func contact(name: String, note: [String]) -> String {
    for (index, value) in note.enumerated() {
        if value.hasPrefix(name) {
            return note[index]
        }
    }
    return ""
}
let find = contact(name: "Kate", note: notebook)
print(find)


/*6. Задание: Перестановка элементов массива
Описание: Разработайте функцию, которая изменяет порядок элементов в массиве, помещая первый элемент в конец и последний - в начало.
Требования:
Функция перестановки: Создайте функцию, принимающую массив.
Функция должна возвращать новый массив с измененным порядком элементов.
Ожидаемый результат: Первый элемент массива станет последним, а последний - первым.*/
var abc = [1, 2, 3, 4, 5, 6, 7]


func change(a: [Int]) -> [Int] {
    var one = abc
    
    let xyz = one.last
    guard let xyz else {
        return []
    }
    one[one.count - 1] = one[0]
    one[0] = xyz
    return one
}
let changed = change(a: abc)
print(changed)

/*7. Задание: Форматирование строки
Описание: Разработайте функцию, которая делает первую букву каждого слова в строке заглавной.
Требования:
Функция форматирования: Создайте функцию, принимающую строку.
Функция должна возвращать строку, где каждое слово начинается с заглавной буквы.
Ожидаемый результат: При передаче строки в функцию, каждое слово в строке начнется с заглавной буквы.*/
func format(str: String) -> String {
    var result = [String]()
    for i in str.split(separator: " ") {
        result.append(String(i.capitalized))
    }
    return result.joined(separator: " ")
}

let resultat = format(str: "привет как у тебя дела?")
print(resultat)


/*8. Задание: Конвертация дня недели
Описание: Разработайте функцию, которая преобразует день недели из строкового формата в числовой.
Требования:
Функция конвертации: Создайте функцию, принимающую день недели в форме строки.
Функция должна возвращать соответствующий день недели в числовом формате.
Ожидаемый результат: При передаче дня недели в форме строки, функция вернет его числовой эквивалент.*/
func convertDay(dayWeek: String) -> Int {
    switch dayWeek {
    case "понедельник":
            return 1
        case "вторник":
            return 2
        case "среда":
            return 3
        case "четверг":
            return 4
        case "пятница":
            return 5
        case "суббота":
            return 6
        case "воскресенье":
        return 7
    default: return 0
    }
}
let result01 = convertDay(dayWeek: "пятница")
print(result01)

/*9. Задание: Уникальные символы
Описание: Разработайте функцию, которая определяет, состоит ли строка из уникальных символов.
Требования:
Функция проверки: Создайте функцию, принимающую строку.
Функция должна возвращать true, если все символы уникальные, и false, если в строке есть повторяющиеся символы.
Ожидаемый результат: При передаче строки в функцию, она определит, состоит ли строка из уникальных символов.*/
func indiSymbols(string str: String) -> Bool {
    Set(str).count == str.count
}

let result9 = indiSymbols(string: "пятниця")
print(result9)


/*10. Задание: Слияние массивов
Описание: Разработайте функцию, которая объединяет два массива в один.
Требования:
Функция слияния: Создайте функцию, принимающую два массива.
Функция должна возвращать новый массив, состоящий из элементов обоих массивов.
Ожидаемый результат: При передаче двух массивов в функцию, она вернет один объединенный массив.*/
func mass(mass1: [Int], mass2: [Int]) -> [Int] {
    mass1 + mass2
}
let allmass = mass(mass1: [1, 3, 5], mass2: [2, 4])
print(allmass)

/*11. Задание: Подсчет гласных
Описание: Разработайте функцию, которая подсчитывает количество гласных в предоставленной строке.
Требования:
Функция подсчета: Создайте функцию, принимающую строку.
Функция должна возвращать количество гласных букв в строке.
Ожидаемый результат: При передаче строки в функцию, она вернет количество гласных в ней.*/
func scoreVowels(str :String) -> Int {
//    let vowels: Set = ["а", "у", "о", "ы", "и", "э", "я", "ю", "ё", "е"]
//    var cont = 0
//    for i in vowels.lowercased() {
//        if vowels.contains(i) {
//            count += 1
//        }
//    }
//    return count
//    let result11 = scoreVowels(vowels: "банан")
//print(result11)
var result = Int()
    let vowels: [Character] = ["а", "у", "о", "ы", "и", "э", "я", "ю", "ё", "е"]
    for i in str {
        if vowels.contains(i) {
            result += 1
        }
    }
    return result
}
let result11 = scoreVowels(str: "банан")
print(result11)
/*12. Задание: Удаление дубликатов из массива
Описание: Разработайте функцию, которая удаляет дубликаты из массива.
Требования:
Функция удаления: Создайте функцию, принимающую массив.
Функция должна возвращать новый массив, который содержит все уникальные элементы исходного массива.
Ожидаемый результат: При передаче массива в функцию, она вернет новый массив без дублирующихся элементов.*/
let arrayDuplicatesNumbers = [1, 1, 2, 2, 3, 3]
func removeDuplicatesFromArray(array: [Int]) -> [Int] {
    var result = [Int]()
    for i in array {
        if !result.contains(i) {
            result.append(i)
        }
    }
    return result
}
let resultTask12 = removeDuplicatesFromArray(array: arrayDuplicatesNumbers)
print(resultTask12)


/*13. Задание: Сумма всех чисел до N
Описание: Разработайте функцию, которая возвращает сумму всех чисел от 1 до N.
Требования:
Функция суммирования: Создайте функцию, принимающую число N.
Функция должна возвращать сумму всех чисел от 1 до N.
Ожидаемый результат: При передаче числа N в функцию, она вернет сумму всех чисел от 1 до N.*/
func sum(n : Int) -> Int {
    var result = Int()

       for i in 1...n {
           result += i
       }

       return result
   }
let result13 = sum(n: 8)
print(result13)


/*14. Задание: Длинное слово в строке
Описание: Разработайте функцию, которая возвращает самое длинное слово в предоставленной строке.
Требования:
Функция поиска: Создайте функцию, принимающую строку.
Функция должна возвращать самое длинное слово в строке.
Ожидаемый результат: При передаче строки в функцию, она вернет самое длинное слово в этой строке.*/
func longestWord(str: String) -> String {
    let words = str.split(separator: " ")
    var longest = String()
    for i in words {
        if i.count > longest.count {
            longest = String(i)
        }
    }
    return longest
}
        let result14 = longestWord(str: "самое длинное слово")
    print(result14)
    
/*15. Задание: Сокращение строки
Описание: Разработайте функцию, которая сокращает строку до заданного числа символов N, добавляя в конец "…", если строка была усечена.
Требования:
Функция сокращения: Создайте функцию, принимающую строку и число N.
Функция должна возвращать строку, сокращенную до N символов, с добавлением "…" в конце, если строка была усечена.
Ожидаемый результат: При передаче строки и числа N в функцию, она вернет сокращенную версию строки.*/
func truncate(str: String, toLength: Int) -> String {
    if str.count > toLength {
        return String(str.prefix(toLength)) + ""
    } else {
        return str
    }
}
let longString = "Swift is a powerful "
print(truncate(str: longString, toLength: 16))

/*16. Задание: Объединение двух массивов без дубликатов
Описание: Разработайте функцию, которая объединяет два массива чисел без повторяющихся элементов.
Требования:
Функция объединения: Создайте функцию, принимающую два массива чисел.
Функция должна возвращать новый массив, содержащий уникальные элементы из обоих массивов.
Ожидаемый результат: При передаче двух массивов чисел в функцию, она вернет новый массив без дубликатов.*/
func uniqueMerge(_ array1: [Int], _ array2: [Int]) -> [Int] {
var result = array1
result.reserveCapacity(result.count + array2.count)
result.append(contentsOf: array2)
result.sort()
return result
}
let result16 = uniqueMerge([1, 2, 3, 7, 5], [4, 9, 6, 8, 0])

/*17. Задание: Количество слов заданной длины
Описание: Разработайте функцию, которая подсчитывает количество слов заданной длины N в предоставленной строке.
Требования:
Функция подсчета: Создайте функцию, принимающую строку и число N.
Функция должна возвращать количество слов в строке, длина которых равна N.
Ожидаемый результат: При передаче строки и числа N в функцию, она вернет количество слов заданной длины.*/
func truncate1(str: String, toLength: Int) -> String {
    if str.count > toLength {
        return String(str.prefix(toLength)) + ""
    } else {
        return str
    }
}
let longString1 = "Swift is a powerful "
print(truncate(str: longString, toLength: 16))


/*18. Задание: Угадай число
Описание: Создайте игру, в которой компьютер случайно выбирает число между 1 и 100, а игрок пытается угадать его за минимальное количество попыток.
Требования:
Игра угадай число: После каждой попытки игрока, компьютер должен сообщать, была ли догадка слишком высокой или слишком низкой.
Ожидаемый результат: Игра предоставляет интерактивный способ угадывания числа с подсказками.*/
var randomNumber = Int.random(in: 1...100)

func guessNumber(_ randomNumber: inout Int ) {

    print("Я загадал цифру от 1 до 100. Введите число, чтобы начать игру:\r")

    var count = 0

    game()

    func game(){

        let n = String(randomNumber)
        let userAnswer = readLine()
        count += 1

        guard let userAnswer else { return }
        if userAnswer == n {
            print("Победа! Количество попыток: \(count)")
        } else if userAnswer < n {
            print("Загаданное число больше")
            game()
        } else if userAnswer > n {
            print("Загаданное число меньше")
            game()
        }
    }
}

//guessNumber(&randomNumber)


/*19. Задание: Простой шифратор и дешифратор слов
Описание: Разработайте метод шифрования, заменяющий определенные буквы другими, и метод дешифрования для восстановления исходного сообщения.
Требования:
Функция шифрования: Создайте функцию encode, которая принимает строку и возвращает зашифрованную строку, заменяя a на z, b на y, c на x и так далее.
Функция дешифрования: Создайте функцию decode, которая принимает зашифрованную строку и возвращает исходную строку, производя обратную замену.
Ожидаемый результат: При передаче строки в функцию encode, она вернет зашифрованную версию, а функция decode вернет исходное сообщение из зашифрованной строки.*/
func encode(_ text: String) -> String {
    let characters = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]

    var encodeText = ""

    for char in text {
        let indexSymbolBeforeEncoding = characters.firstIndex(of: String(char))
        guard let indexSymbolBeforeEncoding else { return "" }
        let indexSymbolAfterEncoding = characters.count - 1 - indexSymbolBeforeEncoding
        encodeText.append(characters[indexSymbolAfterEncoding])
    }

    return encodeText
}

print(encode("abc"))

func decode(_ text: String) -> String {
    let characters = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]

    var decodeText = ""

    for char in text {
        let indexSymbolBeforeEncoding = characters.firstIndex(of: String(char))
        guard let indexSymbolBeforeEncoding else { return "" }
        let indexSymbolAfterEncoding = characters.count + 1 - indexSymbolBeforeEncoding
        decodeText.append(characters[indexSymbolAfterEncoding])
    }

    return decodeText
}

print(encode("zyx"))

/*20. Задание: Функция вывода каждого слова строки на новой строке
Описание: Разработайте функцию, которая выводит каждое слово предоставленной строки на новой строке.
Требования:
Функция вывода: Создайте функцию, принимающую строку.
Функция должна выводить каждое слово на новой строке.
Ожидаемый результат: При передаче строки в функцию, она вернет каждое слово на отдельной строке.*/
func printWordsOnNewLines(_ string: String) {
    for word in string.components(separatedBy: .whitespaces) {
        print(word)
    }
}
let result20 = "Hello World!"
printWordsOnNewLines(result20)


/*21. Задание: Функция вывода каждого слова через определенный интервал времени
Описание: Разработайте функцию, которая выводит каждое слово строки через заданный интервал времени.
Требования:
Функция временного вывода: Создайте функцию, принимающую строку и интервал времени.
Функция должна выводить каждое слово строки с заданным интервалом времени.
Ожидаемый результат: При передаче строки и интервала времени в функцию, она вернет слова строки с заданным интервалом.*/
func delayPrint(string str: String, seconds time: UInt32) {
    let words = str.split(separator: " ")
    for i in words {
        sleep(time)
        print(i)
    }
}

delayPrint(string: "test1 test2 test3", seconds: 1)


/*22. Задание: Конвертация времени из секунд в часы, минуты и секунды
Описание: Разработайте функцию, которая конвертирует время из секунд в часы, минуты и секунды.
Требования:
Функция конвертации времени: Создайте функцию, принимающую количество секунд.
Функция должна возвращать время, представленное в формате часов, минут и секунд.
Ожидаемый результат: При передаче количества секунд программа автоматически определяет 5 часов 28 минут 31 секунда*/
func timeInterval(t: Int) -> String {
    let seconds = t % 60
    let minutes = t / 60 % 60
    let hours = t / 3600 % 24
    
    return "\(hours) часов, \(minutes) минут, \(seconds) секунда"
}
timeInterval(t: 3600)
